# handlers/backup.py
from aiogram import Router, types
from aiogram.utils.keyboard import InlineKeyboardBuilder
from utils.security import is_admin
from utils.backup import create_backup, list_backups, send_backup_via_email
import os
import asyncio
import logging
from aiogram.types import BufferedInputFile
from config.config import EMAIL_CONFIG

router = Router()

@router.message(lambda message: message.text == "/backup")
async def backup_handler(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –±—ç–∫–∞–ø—ã.")
        return

    builder = InlineKeyboardBuilder()
    builder.button(text="üíæ –°–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø", callback_data="create_backup")
    builder.button(text="üìã –°–ø–∏—Å–æ–∫ –±—ç–∫–∞–ø–æ–≤", callback_data="list_backups")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
    builder.button(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close_backup")
    builder.adjust(2)

    await message.answer("üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±—ç–∫–∞–ø–∞–º–∏:", reply_markup=builder.as_markup())

@router.callback_query(lambda c: c.data == "create_backup")
async def create_backup_callback(callback: types.CallbackQuery):
    await callback.answer("‚è≥ –°–æ–∑–¥–∞—é –±—ç–∫–∞–ø...", show_alert=False)
    
    async def create_backup_task():
        try:
            backup_path, error = create_backup()
            
            if error:
                await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞: {error}")
                return
            
            if not backup_path or not os.path.exists(backup_path):
                await callback.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø.")
                return
            
            filename = os.path.basename(backup_path)
            size = os.path.getsize(backup_path)
            size_mb = round(size / (1024 * 1024), 2)
            response = f"‚úÖ –ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω!\nüìÅ –§–∞–π–ª: `{filename}`\nüìä –†–∞–∑–º–µ—Ä: {size_mb} MB"

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏
            if size <= 20 * 1024 * 1024: # 20 MB
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
                try:
                    with open(backup_path, 'rb') as file:
                        input_file = BufferedInputFile(file.read(), filename=filename)
                        await callback.message.bot.send_document(
                            chat_id=callback.message.chat.id,
                            document=input_file,
                            caption=f"üìÑ –ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω: `{filename}`\nüì¶ –†–∞–∑–º–µ—Ä: {size_mb} MB",
                            parse_mode="Markdown"
                        )
                    response += "\nüì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram."
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ –≤ Telegram: {e}")
                    response += f"\n‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Telegram: {e}"
            else:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ø–æ—á—Ç—É
                if EMAIL_CONFIG:
                    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å email —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–æ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –æ—Ç–ø—Ä–∞–≤–∏–º –Ω–∞ sender_email
                    success, msg = send_backup_via_email(backup_path, EMAIL_CONFIG['sender_email'])
                    if success:
                        response += f"\nüì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø–æ—á—Ç—É ({EMAIL_CONFIG['sender_email']})."
                    else:
                        response += f"\n‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –ø–æ—á—Ç—É: {msg}"
                else:
                    response += "\n‚ö†Ô∏è –§–∞–π–ª > 20MB, –Ω–æ –ø–æ—á—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞."

            builder = InlineKeyboardBuilder()
            builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")
            builder.button(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close_backup")
            builder.adjust(1)
            
            await callback.message.edit_text(response, parse_mode="Markdown", reply_markup=builder.as_markup())
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ create_backup_task: {e}")
            try:
                await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
            except:
                pass
    
    asyncio.create_task(create_backup_task())

# ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
# list_backups_callback, close_backup_callback, admin_panel_redirect

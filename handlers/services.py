# handlers/services.py
from aiogram import Router, types
from aiogram.utils.keyboard import InlineKeyboardBuilder
from utils.security import is_user_allowed, is_admin
import subprocess

router = Router()

@router.message(lambda message: message.text == "/services")
async def list_services(message: types.Message):
    if not is_user_allowed(message.from_user.id):
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return

    try:
        output = subprocess.check_output(["systemctl", "list-units", "--type=service", "--state=running"], text=True)
        lines = output.splitlines()[1:11]  # –ü–µ—Ä–≤—ã–µ 10 —Å–µ—Ä–≤–∏—Å–æ–≤
        services = [line.split()[0] for line in lines if line]

        builder = InlineKeyboardBuilder()
        for svc in services:
            builder.button(text=svc, callback_data=f"svc_{svc}")
        builder.adjust(2)

        await message.answer("‚öôÔ∏è –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã:", reply_markup=builder.as_markup())
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

@router.callback_query(lambda c: c.data.startswith("svc_"))
async def service_action(callback: types.CallbackQuery):
    service = callback.data.split("_")[1]
    builder = InlineKeyboardBuilder()
    builder.button(text="üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å", callback_data=f"restart_{service}")
    builder.button(text="‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data=f"stop_{service}")
    builder.button(text="‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å", callback_data=f"start_{service}")
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")
    builder.adjust(2)

    await callback.message.edit_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ `{service}`:", parse_mode="Markdown", reply_markup=builder.as_markup())
    await callback.answer()

@router.callback_query(lambda c: c.data.startswith(("restart_", "stop_", "start_")))
async def handle_service_action(callback: types.CallbackQuery):
    action, service = callback.data.split("_", 1)
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–µ—Ä–≤–∏—Å–∞–º–∏.", show_alert=True)
        return

    try:
        if action == "restart":
            subprocess.run(["systemctl", "restart", service], check=True)
            await callback.message.edit_text(f"‚úÖ –°–µ—Ä–≤–∏—Å `{service}` –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω.", parse_mode="Markdown")
        elif action == "stop":
            subprocess.run(["systemctl", "stop", service], check=True)
            await callback.message.edit_text(f"‚èπ –°–µ—Ä–≤–∏—Å `{service}` –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.", parse_mode="Markdown")
        elif action == "start":
            subprocess.run(["systemctl", "start", service], check=True)
            await callback.message.edit_text(f"‚ñ∂Ô∏è –°–µ—Ä–≤–∏—Å `{service}` –∑–∞–ø—É—â–µ–Ω.", parse_mode="Markdown")
    except subprocess.CalledProcessError as e:
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã: {e}")
    await callback.answer()

@router.callback_query(lambda c: c.data == "cancel")
async def cancel_action(callback: types.CallbackQuery):
    await callback.message.edit_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await callback.answer()

# handlers/monitoring.py
from aiogram import Router, types
from utils.system_monitor import get_system_status, get_logs
from database.database import is_user_allowed, log_action

router = Router()

@router.message(lambda message: message.text == "/status")
async def status_handler(message: types.Message):
    if not is_user_allowed(message.from_user.id):
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return

    log_action(message.from_user.id, message.from_user.username or "Unknown", "/status", "–ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞")

    status = get_system_status()
    response = (
        f"üíª *–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞:*\n"
        f"üîπ CPU: {status['cpu']}%\n"
        f"üîπ RAM: {status['memory']}\n"
        f"üîπ –î–∏—Å–∫: {status['disk']}\n"
        f"üîπ –ê–ø—Ç–∞–π–º: {status['uptime']}\n"
        f"üîπ IP: `{status['ip']}`"
    )
    await message.answer(response, parse_mode="Markdown")

@router.message(lambda message: message.text.startswith("/logs"))
async def logs_handler(message: types.Message):
    if not is_user_allowed(message.from_user.id):
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return

    log_action(message.from_user.id, message.from_user.username or "Unknown", "/logs", f"–ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤")

    try:
        lines = int(message.text.split()[1]) if len(message.text.split()) > 1 else 50
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        lines = min(lines, 200)
    except ValueError:
        lines = 50

    logs = get_logs(lines)
    
    # –û–±—Ä–µ–∑–∞–µ–º —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if len(logs) > 4000:
        logs = logs[:4000] + "\n... (–≤—ã–≤–æ–¥ –æ–±—Ä–µ–∑–∞–Ω)"
    
    try:
        await message.answer(f"üìÑ –ü–æ—Å–ª–µ–¥–Ω–∏–µ {lines} —Å—Ç—Ä–æ–∫ –ª–æ–≥–æ–≤:\n```\n{logs}\n```", parse_mode="MarkdownV2")
    except:
        # –ï—Å–ª–∏ MarkdownV2 –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–±—É–µ–º –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
        await message.answer(f"üìÑ –ü–æ—Å–ª–µ–¥–Ω–∏–µ {lines} —Å—Ç—Ä–æ–∫ –ª–æ–≥–æ–≤:\n```\n{logs}\n```", parse_mode="Markdown")

# handlers/backup.py
import asyncio
import logging
import os
from aiogram import Router, types
from aiogram.types import BufferedInputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder
from config.config import EMAIL_CONFIG, YANDEX_DISK_TOKEN
from utils.backup import create_backup, list_backups, send_backup_via_email
from utils.security import is_admin

router = Router()
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
TELEGRAM_MAX_FILE_SIZE = 20 * 1024 * 1024  # 20 MB

@router.message(lambda message: message.text == "/backup")
async def backup_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /backup - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±—ç–∫–∞–ø–∞–º–∏."""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –±—ç–∫–∞–ø—ã.")
        return

    builder = InlineKeyboardBuilder()
    builder.button(text="üíæ –°–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø", callback_data="create_backup")
    builder.button(text="üìã –°–ø–∏—Å–æ–∫ –±—ç–∫–∞–ø–æ–≤", callback_data="list_backups")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
    builder.button(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close_backup")
    builder.adjust(2)

    await message.answer("üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±—ç–∫–∞–ø–∞–º–∏:", reply_markup=builder.as_markup())

@router.callback_query(lambda c: c.data == "create_backup")
async def create_backup_callback(callback: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞.
    –û—Ç–≤–µ—á–∞–µ—Ç —Å—Ä–∞–∑—É, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ç–∞–π–º–∞—É—Ç–∞, –∑–∞—Ç–µ–º –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É.
    """
    await callback.answer("‚è≥ –°–æ–∑–¥–∞—é –±—ç–∫–∞–ø...", show_alert=False)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å callback
    asyncio.create_task(_create_backup_background_task(callback))

async def _create_backup_background_task(callback: types.CallbackQuery):
    """
    –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞ –∏ –µ–≥–æ –æ—Ç–ø—Ä–∞–≤–∫–∏.
    –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ.
    """
    try:
        # 1. –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø
        backup_path, error = create_backup()
        
        if error:
            await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞: {error}")
            return
        
        if not backup_path or not os.path.exists(backup_path):
            await callback.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø: —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        # 2. –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
        filename = os.path.basename(backup_path)
        size = os.path.getsize(backup_path)
        size_mb = round(size / (1024 * 1024), 2)
        logger.info(f"–ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω: {filename}, —Ä–∞–∑–º–µ—Ä: {size_mb} MB")

        # 3. –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        response_text = f"‚úÖ –ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω!\nüìÅ –§–∞–π–ª: `{filename}`\nüìä –†–∞–∑–º–µ—Ä: {size_mb} MB"

        # 4. –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
        if size <= TELEGRAM_MAX_FILE_SIZE:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
            success, msg = await _send_to_telegram(callback, backup_path, filename, size_mb)
        else:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ø–æ—á—Ç—É
            success, msg = await _send_to_email(backup_path, filename, size_mb)
        
        # 5. –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –¥–æ—Å—Ç–∞–≤–∫–∏
        response_text += f"\n{msg}"
        
        # 6. –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        builder = InlineKeyboardBuilder()
        builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")
        builder.button(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close_backup")
        builder.adjust(1)
        
        await callback.message.edit_text(response_text, parse_mode="Markdown", reply_markup=builder.as_markup())
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ _create_backup_background_task: {e}", exc_info=True)
        try:
            await callback.message.edit_text(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        except:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –ª–æ–≥–∏—Ä—É–µ–º –∏ –≤—ã—Ö–æ–¥–∏–º
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏.")

async def _send_to_telegram(callback: types.CallbackQuery, file_path: str, filename: str, size_mb: float) -> tuple[bool, str]:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª –±—ç–∫–∞–ø–∞ –≤ Telegram.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂ (—É—Å–ø–µ—Ö: bool, —Å–æ–æ–±—â–µ–Ω–∏–µ: str).
    """
    try:
        with open(file_path, 'rb') as file:
            input_file = BufferedInputFile(file.read(), filename=filename)
            await callback.message.bot.send_document(
                chat_id=callback.message.chat.id,
                document=input_file,
                caption=f"üìÑ –ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω: `{filename}`\nüì¶ –†–∞–∑–º–µ—Ä: {size_mb} MB",
                parse_mode="Markdown"
            )
        logger.info(f"–ë—ç–∫–∞–ø {filename} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram.")
        return True, "üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram."
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ –≤ Telegram: {e}")
        return False, f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Telegram: {e}"


async def _send_to_email(file_path: str, filename: str, size_mb: float) -> tuple[bool, str]:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª –±—ç–∫–∞–ø–∞ –Ω–∞ –ø–æ—á—Ç—É –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –Ω–µ–≥–æ."""
    from utils.backup import upload_to_yandex_disk, send_backup_link_via_email # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

    if not EMAIL_CONFIG:
        msg = "‚ö†Ô∏è –§–∞–π–ª > 20MB, –Ω–æ –ø–æ—á—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞."
        logger.warning(msg)
        return False, msg

    recipient_email = EMAIL_CONFIG['sender_email']
    
    # –ü–æ–ø—Ä–æ–±—É–µ–º —Å–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫
    if YANDEX_DISK_TOKEN:
        logger.info("–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±—ç–∫–∞–ø–∞ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫...")
        success, result_or_error = upload_to_yandex_disk(file_path, YANDEX_DISK_TOKEN)
        if success:
            logger.info(f"–ë—ç–∫–∞–ø –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫: {result_or_error}")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –ø–æ –ø–æ—á—Ç–µ
            link_success, link_msg = send_backup_link_via_email(file_path, recipient_email, result_or_error)
            if link_success:
                return True, "üì§ –°—Å—ã–ª–∫–∞ –Ω–∞ –±—ç–∫–∞–ø –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø–æ—á—Ç—É (–Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫)."
            else:
                return False, f"‚ö†Ô∏è –ë—ç–∫–∞–ø –∑–∞–≥—Ä—É–∂–µ–Ω, –Ω–æ –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Å—ã–ª–∫–∏: {link_msg}"
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫: {result_or_error}")
            return False, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫: {result_or_error}"
    else:
        # –ï—Å–ª–∏ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ—Å—Ç–æ —Å–æ–æ–±—â–∞–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π
        msg = "‚ö†Ô∏è –§–∞–π–ª > 20MB –∏ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ."
        logger.warning(msg)
        return False, msg

@router.callback_query(lambda c: c.data == "list_backups")
async def list_backups_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –±—ç–∫–∞–ø–æ–≤."""
    backups, error = list_backups()
    
    if error:
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –±—ç–∫–∞–ø–æ–≤: {error}")
        await callback.answer()
        return
    
    if not backups:
        response = "üì≠ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±—ç–∫–∞–ø–æ–≤."
    else:
        response = "üìã –°–ø–∏—Å–æ–∫ –±—ç–∫–∞–ø–æ–≤:\n\n"
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –±—ç–∫–∞–ø–æ–≤
        for backup in backups[-10:]:
            try:
                size_mb = round(backup['size'] / (1024 * 1024), 2)
                date_str = backup['date'].strftime("%Y-%m-%d %H:%M")
                response += f"‚Ä¢ `{backup['name']}`\n  üìÖ {date_str} | üìä {size_mb} MB\n\n"
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±—ç–∫–∞–ø–∞ {backup.get('name', 'Unknown')}: {e}")
                response += f"‚Ä¢ `{backup.get('name', 'Unknown')}`\n  (–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏)\n\n"
    
    builder = InlineKeyboardBuilder()
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")
    builder.button(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close_backup")
    builder.adjust(1)
    
    await callback.message.edit_text(response, parse_mode="MarkdownV2", reply_markup=builder.as_markup())
    await callback.answer()

@router.callback_query(lambda c: c.data == "close_backup")
async def close_backup_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –º–µ–Ω—é –±—ç–∫–∞–ø–æ–≤."""
    await callback.message.delete()
    await callback.answer()

@router.callback_query(lambda c: c.data == "admin_panel")
async def admin_panel_redirect(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å."""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
        return
    
    builder = InlineKeyboardBuilder()
    builder.button(text="üíæ –°–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø", callback_data="create_backup")
    builder.button(text="üìã –°–ø–∏—Å–æ–∫ –±—ç–∫–∞–ø–æ–≤", callback_data="list_backups")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
    builder.button(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close_backup")
    builder.adjust(2)
    
    await callback.message.edit_text("üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±—ç–∫–∞–ø–∞–º–∏:", reply_markup=builder.as_markup())
    await callback.answer()

# handlers/user_management.py
from aiogram import Router, types
from utils.security import is_admin
import subprocess
import logging

router = Router()

@router.message(lambda message: message.text.startswith("/adduser"))
async def add_user(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.")
        return

    try:
        parts = message.text.split()
        if len(parts) < 2:
            await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/adduser <username> [password]`\n–ï—Å–ª–∏ –ø–∞—Ä–æ–ª—å –Ω–µ —É–∫–∞–∑–∞–Ω, –æ–Ω –±—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω.", parse_mode="Markdown")
            return

        username = parts[1]
        password = parts[2] if len(parts) > 2 else None

        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cmd_create = ["sudo", "useradd", "-m", "-s", "/bin/bash", username]
        result_create = subprocess.run(cmd_create, capture_output=True, text=True)

        if result_create.returncode != 0:
            if "already exists" in result_create.stderr:
                await message.answer(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å `{username}` —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.", parse_mode="Markdown")
            else:
                await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {result_create.stderr}")
            return

        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä–æ–ª—è
        if password:
            cmd_pass = f"echo '{username}:{password}' | sudo chpasswd"
            result_pass = subprocess.run(cmd_pass, shell=True, capture_output=True, text=True)
            if result_pass.returncode != 0:
                await message.answer(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω, –Ω–æ –æ—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞—Ä–æ–ª—è: {result_pass.stderr}")
                return
            else:
                await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å `{username}` —Å–æ–∑–¥–∞–Ω –∏ –ø–∞—Ä–æ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.", parse_mode="Markdown")
        else:
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è (–ø—Ä–æ—Å—Ç–æ–π –ø—Ä–∏–º–µ—Ä)
            import random, string
            password = ''.join(random.choices(string.ascii_letters + string.digits, k=12))
            cmd_pass = f"echo '{username}:{password}' | sudo chpasswd"
            result_pass = subprocess.run(cmd_pass, shell=True, capture_output=True, text=True)
            if result_pass.returncode != 0:
                await message.answer(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω, –Ω–æ –æ—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞—Ä–æ–ª—è: {result_pass.stderr}")
                return
            else:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –∏–ª–∏ –∫–∞–∫-—Ç–æ –∏–Ω–∞—á–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ
                await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å `{username}` —Å–æ–∑–¥–∞–Ω.\nüîë –ü–∞—Ä–æ–ª—å: `{password}` (—Å–æ–æ–±—â–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –±–µ–∑–æ–ø–∞—Å–Ω–æ!)", parse_mode="Markdown")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ /adduser: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

@router.message(lambda message: message.text.startswith("/deluser"))
async def del_user(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.")
        return

    try:
        parts = message.text.split()
        if len(parts) < 2:
            await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/deluser <username>`", parse_mode="Markdown")
            return

        username = parts[1]

        # –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ –¥–æ–º–∞—à–Ω–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        cmd_del = ["sudo", "userdel", "-r", username]
        result_del = subprocess.run(cmd_del, capture_output=True, text=True)

        if result_del.returncode != 0:
            if "does not exist" in result_del.stderr:
                await message.answer(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å `{username}` –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.", parse_mode="Markdown")
            else:
                await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {result_del.stderr}")
            return

        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å `{username}` —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.", parse_mode="Markdown")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ /deluser: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

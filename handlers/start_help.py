# handlers/start_help.py
from aiogram import Router, types
from aiogram.utils.keyboard import InlineKeyboardBuilder
from database.database import is_user_allowed, is_admin, add_user
from utils.system_monitor import get_system_status

router = Router()

@router.message(lambda message: message.text == "/start")
async def start_handler(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username or "Unknown"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º –∏–∑ .env
    try:
        with open('.env', 'r') as f:
            env_content = f.read()
            admin_id_from_env = int(env_content.split('ADMIN_ID=')[1].split('\n')[0])
            if user_id == admin_id_from_env:
                add_user(user_id, is_admin=True)
    except:
        pass  # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å .env, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ
    
    if not is_user_allowed(user_id):
        await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return
    
    builder = InlineKeyboardBuilder()
    builder.button(text="üìä –°—Ç–∞—Ç—É—Å", callback_data="show_status")
    builder.button(text="üìã –ü–æ–º–æ—â—å", callback_data="show_help")
    if is_admin(user_id):
        builder.button(text="‚öôÔ∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_panel")
    builder.adjust(2)
    
    welcome_text = f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {username}!\n\n"
    welcome_text += "–Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∞—à–∏–º VDS —Å–µ—Ä–≤–µ—Ä–æ–º.\n"
    welcome_text += "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–æ–º."
    
    await message.answer(welcome_text, reply_markup=builder.as_markup())

@router.message(lambda message: message.text == "/help")
async def help_handler(message: types.Message):
    user_id = message.from_user.id
    
    if not is_user_allowed(user_id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return
    
    is_user_admin = is_admin(user_id)
    
    help_text = "ü§ñ *–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:*\n\n"
    help_text += "üîç *–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:*\n"
    help_text += "`/status` - –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞\n"
    help_text += "`/logs [N]` - –ü–æ—Å–ª–µ–¥–Ω–∏–µ N —Å—Ç—Ä–æ–∫ –ª–æ–≥–æ–≤\n"
    help_text += "`/processes` - –°–ø–∏—Å–æ–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤\n"
    help_text += "`/ports` - –û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ—Ä—Ç—ã\n"
    help_text += "`/connections` - –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è\n\n"
    
    help_text += "„Çµ„Éº„Éì—Å *–°–µ—Ä–≤–∏—Å—ã:*\n"
    help_text += "`/services` - –°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–∏—Å–æ–≤\n"
    help_text += "`/restart [—Å–µ—Ä–≤–∏—Å]` - –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞\n"
    help_text += "`/start [—Å–µ—Ä–≤–∏—Å]` - –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞\n"
    help_text += "`/stop [—Å–µ—Ä–≤–∏—Å]` - –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞\n\n"
    
# handlers/start_help.py (—Ñ—Ä–∞–≥–º–µ–Ω—Ç –≤ help_handler)
    if is_user_admin:
        help_text += "üîê *–ê–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥—ã:*\n"
        help_text += "`/auth [user_id]` - –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        help_text += "`/exec [–∫–æ–º–∞–Ω–¥–∞]` - –í—ã–ø–æ–ª–Ω–∏—Ç—å shell –∫–æ–º–∞–Ω–¥—É\n"
        help_text += "`/backup` - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±—ç–∫–∞–ø–∞–º–∏\n"
        help_text += "`/adduser <username> [pass]` - –°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n" # –ù–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
        help_text += "`/deluser <username>` - –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"       # –ù–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
        help_text += "\n"
    help_text += "‚ÑπÔ∏è *–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:*\n"
    help_text += "`/start` - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
    help_text += "`/help` - –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å"
    
    await message.answer(help_text, parse_mode="Markdown")

# Callback handlers –¥–ª—è –∫–Ω–æ–ø–æ–∫
@router.callback_query(lambda c: c.data == "show_status")
async def show_status_callback(callback: types.CallbackQuery):
    status = get_system_status()
    response = (
        f"üíª *–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞:*\n"
        f"üîπ CPU: {status['cpu']}%\n"
        f"üîπ RAM: {status['memory']}\n"
        f"üîπ –î–∏—Å–∫: {status['disk']}\n"
        f"üîπ –ê–ø—Ç–∞–π–º: {status['uptime']}\n"
        f"üîπ IP: `{status['ip']}`"
    )
    
    builder = InlineKeyboardBuilder()
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
    builder.adjust(1)
    
    await callback.message.edit_text(response, parse_mode="Markdown", reply_markup=builder.as_markup())
    await callback.answer()

@router.callback_query(lambda c: c.data == "show_help")
async def show_help_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    is_user_admin = is_admin(user_id)
    
    help_text = "ü§ñ *–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:*\n\n"
    help_text += "üîç *–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:*\n"
    help_text += "`/status` - –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞\n"
    help_text += "`/logs [N]` - –ü–æ—Å–ª–µ–¥–Ω–∏–µ N —Å—Ç—Ä–æ–∫ –ª–æ–≥–æ–≤\n"
    help_text += "`/processes` - –°–ø–∏—Å–æ–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤\n"
    help_text += "`/ports` - –û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ—Ä—Ç—ã\n"
    help_text += "`/connections` - –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è\n\n"
    
    help_text += "„Çµ„Éº„Éì—Å *–°–µ—Ä–≤–∏—Å—ã:*\n"
    help_text += "`/services` - –°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–∏—Å–æ–≤\n"
    help_text += "`/restart [—Å–µ—Ä–≤–∏—Å]` - –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞\n"
    help_text += "`/start [—Å–µ—Ä–≤–∏—Å]` - –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞\n"
    help_text += "`/stop [—Å–µ—Ä–≤–∏—Å]` - –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞\n\n"
    
    if is_user_admin:
        help_text += "üîê *–ê–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥—ã:*\n"
        help_text += "`/auth [user_id]` - –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        help_text += "`/exec [–∫–æ–º–∞–Ω–¥–∞]` - –í—ã–ø–æ–ª–Ω–∏—Ç—å shell –∫–æ–º–∞–Ω–¥—É\n"
        help_text += "`/backup` - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±—ç–∫–∞–ø–∞–º–∏\n\n"
    
    help_text += "‚ÑπÔ∏è *–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:*\n"
    help_text += "`/start` - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
    help_text += "`/help` - –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å"
    
    builder = InlineKeyboardBuilder()
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
    builder.adjust(1)
    
    await callback.message.edit_text(help_text, parse_mode="Markdown", reply_markup=builder.as_markup())
    await callback.answer()

@router.callback_query(lambda c: c.data == "admin_panel")
async def admin_panel_callback(callback: types.CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
        return
    
    builder = InlineKeyboardBuilder()
    builder.button(text="üíæ –°–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø", callback_data="create_backup")
    builder.button(text="üìã –°–ø–∏—Å–æ–∫ –±—ç–∫–∞–ø–æ–≤", callback_data="list_backups")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
    builder.button(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close_backup")
    builder.adjust(2)
    
    await callback.message.edit_text("üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±—ç–∫–∞–ø–∞–º–∏:", reply_markup=builder.as_markup())
    await callback.answer()

@router.callback_query(lambda c: c.data == "back_to_main")
async def back_to_main_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    builder = InlineKeyboardBuilder()
    builder.button(text="üìä –°—Ç–∞—Ç—É—Å", callback_data="show_status")
    builder.button(text="üìã –ü–æ–º–æ—â—å", callback_data="show_help")
    if is_admin(user_id):
        builder.button(text="‚öôÔ∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_panel")
    builder.adjust(2)
    
    welcome_text = "üëã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    
    await callback.message.edit_text(welcome_text, reply_markup=builder.as_markup())
    await callback.answer()

@router.callback_query(lambda c: c.data == "close_backup")
async def close_backup_callback(callback: types.CallbackQuery):
    await callback.message.delete()
    await callback.answer()
